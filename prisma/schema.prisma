// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Account {
  id                 String  @id @default(cuid())
  userId             String
  type               String
  provider           String
  providerAccountId  String
  refresh_token      String?  @db.Text
  access_token       String?  @db.Text
  expires_at         Int?
  token_type         String?
  scope              String?
  id_token           String?  @db.Text
  session_state      String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String    @id @default(cuid())
  username      String?   @unique
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  ethAddress    String?
  record        BattleRecord?
  matches       PlayerMatch[] 
  accounts      Account[]
  sessions      Session[]
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model BattleRecord {  
  id      String   @id
  user    User  @relation(fields: [id], references: [id], onDelete: Cascade)
  wins    Int   @default(0)
  losses  Int   @default(0)
}

model Move {
  id    Int @id
  body  Json
}

model Pokemon {
  id    Int @id
  body  Json
}

model Match {
  id      Int @id @default(autoincrement())
  players PlayerMatch[]
}

model PlayerMatch {
  userID    String
  user      User @relation(fields: [userID], references: [id])
  matchId   Int
  match     Match @relation(fields: [matchId], references: [id])

  @@id([userID, matchId])
}